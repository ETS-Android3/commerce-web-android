/*
 * Copyright 2019 Mastercard
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file has been modified to add support for additional pom.xml configurations
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
      : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
      : "https://oss.sonatype.org/content/repositories/snapshots/"
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: getReleaseRepositoryUrl()) {
          def ossrhUsername = findProperty("ossrhUsername")
          def ossrhPassword = findProperty("ossrhPassword")

          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: getSnapshotRepositoryUrl()) {
          def ossrhUsername = findProperty("ossrhUsername")
          def ossrhPassword = findProperty("ossrhPassword")

          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
          }

          licenses {
            license {
              name POM_LICENSE_NAME
              url POM_LICENSE_URL
            }
          }

          organization {
            name = POM_ORGANIZATION_NAME
            url = POM_ORGANIZATION_URL
          }

          developers {
            developer {
              id POM_DEVELOPER1_ID
              name POM_DEVELOPER1_NAME
              email POM_DEVELOPER1_EMAIL
            }

            developer {
              id POM_DEVELOPER2_ID
              name POM_DEVELOPER2_NAME
              email POM_DEVELOPER2_EMAIL
            }
          }
        }
      }
    }

    signing {
      required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }

      def signingKey = findProperty("signingKey")
      def signingPassword = findProperty("signingPassword")

      useInMemoryPgpKeys(signingKey, signingPassword)

      sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
      source = android.sourceSets.main.java.sourceFiles
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
      classifier = 'javadoc'
      from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
      classifier = 'sources'
      from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
      archives androidSourcesJar
    }
  }
}