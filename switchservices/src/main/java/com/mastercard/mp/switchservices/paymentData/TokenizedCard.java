package com.mastercard.mp.switchservices.paymentData;

import java.util.Objects;
import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;

/**
 * This class contains methods to get the tokenized card details.
 **/
@Root(name = "TokenizedCard") public class TokenizedCard {

  @Element(name = "fPanSuffix", required = false) private String fPanSuffix = null;

  @Element(name = "tokenRequestorId", required = false) private String tokenRequestorId = null;

  @Element(name = "paymentAccountReference", required = false) private String
      paymentAccountReference = null;

  @Element(name = "sourceSystem", required = false) private String sourceSystem = null;

  @Element(name = "cryptogram", required = false) private String cryptogram = null;

  public enum CryptogramFormatEnum {
    ICC("ICC"), UCAF("UCAF");

    private String value;

    CryptogramFormatEnum(String value) {
      this.value = value;
    }

    @Override public String toString() {
      return value;
    }
  }

  @Element(name = "cryptogramFormat", required = false) private CryptogramFormatEnum
      cryptogramFormat = null;

  @Element(name = "unpredictableNumber", required = false) private String unpredictableNumber =
      null;

  @Element(name = "eci", required = false) private String eci = null;

  /**
   * Gets the last digits of card number or primary account number that identifies the card. Also
   * known as Funding Primary Account Number. Normally suffix is the last four digits.
   *
   * @return the last digits of card number or primary account number that identifies the card. Also
   * known as Funding Primary Account Number. Normally suffix is the last four digits.
   **/

  public String getFPanSuffix() {
    return fPanSuffix;
  }

  /**
   * Sets the last digits of card number or primary account number that identifies the card. Also
   * known as Funding Primary Account Number. Normally suffix is the last four digits.
   *
   * @param fPanSuffix the last digits of card number or primary account number that identifies the
   * card. Also known as Funding Primary Account Number. Normally suffix is the last four digits.
   */
  public TokenizedCard fPanSuffix(String fPanSuffix) {
    this.fPanSuffix = fPanSuffix;
    return this;
  }

  /**
   * Gets the token request or id.
   *
   * @return the token request or id.
   **/

  public String getTokenRequestorId() {
    return tokenRequestorId;
  }

  /**
   * Sets the token request or id.
   *
   * @param tokenRequestorId the token request or id.
   */
  public TokenizedCard tokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

  /**
   * Gets the payment account reference.
   *
   * @return the payment account reference.
   **/

  public String getPaymentAccountReference() {
    return paymentAccountReference;
  }

  /**
   * Sets the payment account reference.
   *
   * @param paymentAccountReference the payment account reference.
   */
  public TokenizedCard paymentAccountReference(String paymentAccountReference) {
    this.paymentAccountReference = paymentAccountReference;
    return this;
  }

  /**
   * Gets the source system. Currently, the only valid source system is: MDES.
   *
   * @return the source system. Currently, the only valid source system is: MDES.
   **/

  public String getSourceSystem() {
    return sourceSystem;
  }

  /**
   * Sets the source system. Currently, the only valid source system is: MDES.
   *
   * @param sourceSystem the source system. Currently, the only valid source system is: MDES.
   */
  public TokenizedCard sourceSystem(String sourceSystem) {
    this.sourceSystem = sourceSystem;
    return this;
  }

  /**
   * Gets the DSRP cryptogram generated by the consumers Masterpass wallet.
   *
   * @return the DSRP cryptogram generated by the consumers Masterpass wallet.
   **/

  public String getCryptogram() {
    return cryptogram;
  }

  /**
   * Sets the DSRP cryptogram generated by the consumers Masterpass wallet.
   *
   * @param cryptogram the DSRP cryptogram generated by the consumers Masterpass wallet.
   */
  public TokenizedCard cryptogram(String cryptogram) {
    this.cryptogram = cryptogram;
    return this;
  }

  /**
   * Gets the type of cryptogram generated by the consumers Masterpass wallet. MasterPass passes the
   * most secure selection (ICC) if the merchant or service provider has indicated they can accept
   * both types (UCAF, ICC).
   *
   * @return the type of cryptogram generated by the consumers Masterpass wallet. MasterPass passes
   * the most secure selection (ICC) if the merchant or service provider has indicated they can
   * accept both types (UCAF, ICC).
   **/

  public CryptogramFormatEnum getCryptogramFormat() {
    return cryptogramFormat;
  }

  /**
   * Sets the type of cryptogram generated by the consumers Masterpass wallet. MasterPass passes the
   * most secure selection (ICC) if the merchant or service provider has indicated they can accept
   * both types (UCAF, ICC).
   *
   * @param cryptogramFormat the type of cryptogram generated by the consumers Masterpass wallet.
   * MasterPass passes the most secure selection (ICC) if the merchant or service provider has
   * indicated they can accept both types (UCAF, ICC).
   */
  public TokenizedCard cryptogramFormat(CryptogramFormatEnum cryptogramFormat) {
    this.cryptogramFormat = cryptogramFormat;
    return this;
  }

  /**
   * Gets the unpredictable number. EMV quality random number generated by the merchant, service
   * provider, or, if null, by Masterpass and Base64 encoded.
   *
   * @return the unpredictable number. EMV quality random number generated by the merchant, service
   * provider, or, if null, by Masterpass and Base64 encoded.
   **/

  public String getUnpredictableNumber() {
    return unpredictableNumber;
  }

  /**
   * Sets the unpredictable number. EMV quality random number generated by the merchant, service
   * provider, or, if null, by Masterpass and Base64 encoded.
   *
   * @param unpredictableNumber the unpredictable number. EMV quality random number generated by the
   * merchant, service provider, or, if null, by Masterpass and Base64 encoded.
   */
  public TokenizedCard unpredictableNumber(String unpredictableNumber) {
    this.unpredictableNumber = unpredictableNumber;
    return this;
  }

  /**
   * Gets the electronic commerce indicator (ECI) value (DE 48 SE 42 position 3). Present only when
   * DSRP data type is UCAF. For MasterCard brand cards, value is: 02 Authenticated by ACS (Card
   * Issuer Liability)
   *
   * @return the electronic commerce indicator (ECI) value (DE 48 SE 42 position 3). Present only
   * when DSRP data type is UCAF. For MasterCard brand cards, value is: 02 Authenticated by ACS
   * (Card Issuer Liability)
   **/

  public String getEci() {
    return eci;
  }

  /**
   * Sets the electronic commerce indicator (ECI) value (DE 48 SE 42 position 3). Present only when
   * DSRP data type is UCAF. For MasterCard brand cards, value is: 02 Authenticated by ACS (Card
   * Issuer Liability)
   *
   * @param eci the electronic commerce indicator (ECI) value (DE 48 SE 42 position 3). Present only
   * when DSRP data type is UCAF. For MasterCard brand cards, value is: 02 Authenticated by ACS
   * (Card Issuer Liability)
   */
  public TokenizedCard eci(String eci) {
    this.eci = eci;
    return this;
  }

  /**
   * Returns true if the arguments are equal to each other and false
   * otherwise. Consequently, if both arguments are null, true is returned and
   * if exactly one argument is null, false is returned. Otherwise, equality
   * is determined by using the equals method of the first argument.
   */
  @Override public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizedCard tokenizedCard = (TokenizedCard) o;
    return Objects.equals(fPanSuffix, tokenizedCard.fPanSuffix)
        && Objects.equals(tokenRequestorId, tokenizedCard.tokenRequestorId)
        && Objects.equals(paymentAccountReference, tokenizedCard.paymentAccountReference)
        && Objects.equals(sourceSystem, tokenizedCard.sourceSystem)
        && Objects.equals(cryptogram, tokenizedCard.cryptogram)
        && Objects.equals(cryptogramFormat, tokenizedCard.cryptogramFormat)
        && Objects.equals(unpredictableNumber, tokenizedCard.unpredictableNumber)
        && Objects.equals(eci, tokenizedCard.eci);
  }

  /**
   * Generates a hash code for a sequence of input values.
   */
  @Override public int hashCode() {
    return Objects.hash(fPanSuffix, tokenRequestorId, paymentAccountReference, sourceSystem,
        cryptogram, cryptogramFormat, unpredictableNumber, eci);
  }

  /**
   * Returns the result of calling toString for a non-null argument and "null" for a null argument.
   */
  @Override public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizedCard {\n");

    sb.append("    fPanSuffix: ").append(toIndentedString(fPanSuffix)).append("\n");
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    paymentAccountReference: ")
        .append(toIndentedString(paymentAccountReference))
        .append("\n");
    sb.append("    sourceSystem: ").append(toIndentedString(sourceSystem)).append("\n");
    sb.append("    cryptogram: ").append(toIndentedString(cryptogram)).append("\n");
    sb.append("    cryptogramFormat: ").append(toIndentedString(cryptogramFormat)).append("\n");
    sb.append("    unpredictableNumber: ")
        .append(toIndentedString(unpredictableNumber))
        .append("\n");
    sb.append("    eci: ").append(toIndentedString(eci)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
